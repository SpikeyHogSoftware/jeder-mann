{"version":3,"file":"js/357.66f4eac8.js","mappings":"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","sources":["webpack://jeder-mann-vue-frontend/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://jeder-mann-vue-frontend/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://jeder-mann-vue-frontend/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://jeder-mann-vue-frontend/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://jeder-mann-vue-frontend/../src/defaults.ts","webpack://jeder-mann-vue-frontend/../src/rules.ts","webpack://jeder-mann-vue-frontend/../src/helpers.ts","webpack://jeder-mann-vue-frontend/../src/Tokenizer.ts","webpack://jeder-mann-vue-frontend/../src/Lexer.ts","webpack://jeder-mann-vue-frontend/../src/Renderer.ts","webpack://jeder-mann-vue-frontend/../src/TextRenderer.ts","webpack://jeder-mann-vue-frontend/../src/Parser.ts","webpack://jeder-mann-vue-frontend/../src/Hooks.ts","webpack://jeder-mann-vue-frontend/../src/Instance.ts","webpack://jeder-mann-vue-frontend/../src/marked.ts"],"sourcesContent":["function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nexport { _typeof as default };","import _typeof from \"./typeof.js\";\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nexport { toPrimitive as default };","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nexport { toPropertyKey as default };","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nexport { _defineProperty as default };","import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults<ParserOutput = string, RendererOutput = string>(): MarkedOptions<ParserOutput, RendererOutput> {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport let _defaults: MarkedOptions<any, any> = _getDefaults();\n\nexport function changeDefaults<ParserOutput = string, RendererOutput = string>(newDefaults: MarkedOptions<ParserOutput, RendererOutput>) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\[\\s\\S]|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = edit(/link|code|html/, 'g')\n  .replace('link', /\\[(?:[^\\[\\]`]|(?<!`)(?<a>`+)[^`]+\\k<a>(?!`))*?\\]\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)]|\\((?:\\\\[\\s\\S]|[^\\\\\\(\\)])*\\))*\\)/)\n  .replace('code', /(?<!`)(?<b>`+)[^`]+\\k<b>(?!`)/)\n  .replace('html', /<(?! )[^<>]*?>/)\n  .getRegex();\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\[\\s\\S]|[^\\[\\]\\\\])*\\]|\\\\[\\s\\S]|`+[^`]*?`+(?!`)|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\nconst _caseInsensitiveProtocol = /[hH][tT][tT][pP][sS]?|[fF][tT][pP]/;\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:protocol):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/)\n    .replace('protocol', _caseInsensitiveProtocol)\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\[\\s\\S]|[^\\\\])*?(?:\\\\[\\s\\S]|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: edit(/^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|protocol:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/)\n    .replace('protocol', _caseInsensitiveProtocol)\n    .getRegex(),\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer<ParserOutput, RendererOutput>; // set by the lexer\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer<ParserOutput = string, RendererOutput = string> {\n  tokens: TokensList;\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer<ParserOutput, RendererOutput>;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline<ParserOutput = string, RendererOutput = string>(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const lexer = new _Lexer<ParserOutput, RendererOutput>(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += (lastToken.raw.endsWith('\\n') ? '' : '\\n') + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out blocks from extensions\n    maskedSrc = this.options.hooks?.emStrongMask?.call({ lexer: this }, maskedSrc) ?? maskedSrc;\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  parser!: _Parser<ParserOutput, RendererOutput>; // set by the parser\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): RendererOutput {\n    return '' as RendererOutput;\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): RendererOutput {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n' as RendererOutput;\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n' as RendererOutput;\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): RendererOutput {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n` as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  def(token: Tokens.Def): RendererOutput {\n    return '' as RendererOutput;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): RendererOutput {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n` as RendererOutput;\n  }\n\n  hr(token: Tokens.Hr): RendererOutput {\n    return '<hr>\\n' as RendererOutput;\n  }\n\n  list(token: Tokens.List): RendererOutput {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n' as RendererOutput;\n  }\n\n  listitem(item: Tokens.ListItem): RendererOutput {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n` as RendererOutput;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): RendererOutput {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">' as RendererOutput;\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): RendererOutput {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n` as RendererOutput;\n  }\n\n  table(token: Tokens.Table): RendererOutput {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell as ParserOutput });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell as ParserOutput });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n' as RendererOutput;\n  }\n\n  tablerow({ text }: Tokens.TableRow<ParserOutput>): RendererOutput {\n    return `<tr>\\n${text}</tr>\\n` as RendererOutput;\n  }\n\n  tablecell(token: Tokens.TableCell): RendererOutput {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n` as RendererOutput;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): RendererOutput {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>` as RendererOutput;\n  }\n\n  em({ tokens }: Tokens.Em): RendererOutput {\n    return `<em>${this.parser.parseInline(tokens)}</em>` as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return `<code>${escape(text, true)}</code>` as RendererOutput;\n  }\n\n  br(token: Tokens.Br): RendererOutput {\n    return '<br>' as RendererOutput;\n  }\n\n  del({ tokens }: Tokens.Del): RendererOutput {\n    return `<del>${this.parser.parseInline(tokens)}</del>` as RendererOutput;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): RendererOutput {\n    const text = this.parser.parseInline(tokens) as string;\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text as RendererOutput;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out as RendererOutput;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): RendererOutput {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer) as string;\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text) as RendererOutput;\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out as RendererOutput;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape): RendererOutput {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens) as unknown as RendererOutput\n      : ('escaped' in token && token.escaped ? token.text as RendererOutput : escape(token.text) as RendererOutput);\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer<RendererOutput = string> {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  em({ text }: Tokens.Em): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  codespan({ text }: Tokens.Codespan): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  del({ text }: Tokens.Del): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag): RendererOutput {\n    return text as RendererOutput;\n  }\n\n  link({ text }: Tokens.Link): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  image({ text }: Tokens.Image): RendererOutput {\n    return '' + text as RendererOutput;\n  }\n\n  br(): RendererOutput {\n    return '' as RendererOutput;\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  renderer: _Renderer<ParserOutput, RendererOutput>;\n  textRenderer: _TextRenderer<RendererOutput>;\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer<ParserOutput, RendererOutput>();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer<RendererOutput>();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline<ParserOutput = string, RendererOutput = string>(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    const parser = new _Parser<ParserOutput, RendererOutput>(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'def', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'def': {\n          out += this.renderer.def(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken) as string;\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += ('\\n' + this.renderer.text(textToken));\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out as ParserOutput;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer<ParserOutput, RendererOutput> | _TextRenderer<RendererOutput> = this.renderer): ParserOutput {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '' as ParserOutput;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out as ParserOutput;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks<ParserOutput = string, RendererOutput = string> {\n  options: MarkedOptions<ParserOutput, RendererOutput>;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n    'emStrongMask',\n  ]);\n\n  static passThroughHooksRespectAsync = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: ParserOutput) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Mask contents that should not be interpreted as em/strong delimiters\n   */\n  emStrongMask(src: string) {\n    return src;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse<ParserOutput, RendererOutput> : _Parser.parseInline<ParserOutput, RendererOutput>;\n  }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked<ParserOutput = string, RendererOutput = string> {\n  defaults = _getDefaults<ParserOutput, RendererOutput>();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser<ParserOutput, RendererOutput>;\n  Renderer = _Renderer<ParserOutput, RendererOutput>;\n  TextRenderer = _TextRenderer<RendererOutput>;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer<ParserOutput, RendererOutput>;\n  Hooks = _Hooks<ParserOutput, RendererOutput>;\n\n  constructor(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension<ParserOutput, RendererOutput>[]) {\n    const extensions: MarkedOptions<ParserOutput, RendererOutput>['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions<ParserOutput, RendererOutput>;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer<ParserOutput, RendererOutput>, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return (ret || '') as RendererOutput;\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer<ParserOutput, RendererOutput>(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer<ParserOutput, RendererOutput>, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks<ParserOutput, RendererOutput>();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks<ParserOutput, RendererOutput>, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async && _Hooks.passThroughHooksRespectAsync.has(prop)) {\n                return (async() => {\n                  const ret = await hooksFunc.call(hooks, arg);\n                  return prevHook.call(hooks, ret);\n                })();\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              if (this.defaults.async) {\n                return (async() => {\n                  let ret = await hooksFunc.apply(hooks, args);\n                  if (ret === false) {\n                    ret = await prevHook.apply(hooks, args);\n                  }\n                  return ret;\n                })();\n              }\n\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions<ParserOutput, RendererOutput>) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions<ParserOutput, RendererOutput>) {\n    return _Parser.parse<ParserOutput, RendererOutput>(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: true }): Promise<ParserOutput>;\n      (src: string, options: MarkedOptions<ParserOutput, RendererOutput> & { async: false }): ParserOutput;\n      (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): ParserOutput | Promise<ParserOutput>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions<ParserOutput, RendererOutput> | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      if (opt.async) {\n        return (async() => {\n          const processedSrc = opt.hooks ? await opt.hooks.preprocess(src) : src;\n          const lexer = opt.hooks ? await opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n          const tokens = await lexer(processedSrc, opt);\n          const processedTokens = opt.hooks ? await opt.hooks.processAllTokens(tokens) : tokens;\n          if (opt.walkTokens) {\n            await Promise.all(this.walkTokens(processedTokens, opt.walkTokens));\n          }\n          const parser = opt.hooks ? await opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n          const html = await parser(processedTokens, opt);\n          return opt.hooks ? await opt.hooks.postprocess(html) : html;\n        })().catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html);\n        }\n        return html;\n      } catch(e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","toPrimitive","t","r","e","i","call","TypeError","String","Number","toPropertyKey","_defineProperty","Object","defineProperty","value","enumerable","configurable","writable","L","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","T","G","u","I","exec","h","source","n","replace","s","m","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","be","Re","Te","E","Oe","F","ie","oe","we","j","ye","Q","Pe","Se","v","U","$e","ae","_e","K","blockquote","code","def","fences","heading","hr","html","lheading","list","newline","paragraph","table","text","re","Le","Me","ze","Ae","le","Ie","D","W","ue","Ee","pe","Ce","Be","qe","ce","ve","De","he","He","Ze","Ge","Ne","Fe","je","Qe","q","Ue","de","ke","Ke","se","X","_backpedal","anyPunctuation","autolink","blockSkip","br","del","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","escape","link","nolink","punctuation","reflink","reflinkSearch","tag","url","We","N","Xe","C","normal","M","Je","ge","w","test","J","encodeURI","V","a","l","split","trim","shift","length","at","pop","splice","push","z","charAt","slice","fe","indexOf","me","href","title","other","state","inLink","type","raw","tokens","inlineTokens","Ve","match","map","join","y","this","options","space","rules","block","codeBlockStyle","lang","inline","depth","lexer","c","p","g","top","blockTokens","d","R","f","O","substring","ordered","start","loose","items","H","repeat","trimStart","search","ee","te","ne","xe","A","Z","Y","task","checked","trimEnd","filter","some","pre","toLowerCase","header","align","rows","inRawBlock","emStrong","lastIndex","index","codespan","inlineText","escaped","x","links","create","inlineQueue","lex","lexInline","src","endsWith","startBlock","forEach","charCodeAt","console","error","Error","keys","includes","lastIndexOf","emStrongMask","startInline","P","parser","parse","parseInline","listitem","checkbox","unshift","tablecell","tablerow","strong","em","image","textRenderer","$","b","renderers","S","_Class3","preprocess","postprocess","processAllTokens","provideLexer","provideParser","Set","B","setOptions","parseMarkdown","use","concat","defaults","childTokens","flat","name","apply","level","passThroughHooks","has","passThroughHooksRespectAsync","onError","toString","Promise","all","catch","message","resolve","reject","_","k","getDefaults","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks"],"sourceRoot":""}